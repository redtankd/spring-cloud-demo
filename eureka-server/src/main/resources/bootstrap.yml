# The Eureka server does not have a backend store, but the service instances
# in the registry all have to send heartbeats to keep their registrations
# up to date (so this can be done in memory). Clients also have an in-memory cache
# of Eureka registrations (so they do not have to go to the registry for every request to a service).

# By default, every Eureka server is also a Eureka client and requires (at least one)
# service URL to locate a peer. If you do not provide it, the service runs and works,
# but it fills your logs with a lot of noise about not being able to register with the peer.
# More configuration about client is in Eureka Client's docs

# The combination of the two caches (client and server) and the heartbeats make
# a standalone Eureka server fairly resilient to failure, as long as there is
# some sort of monitor or elastic runtime (such as Cloud Foundry) keeping it alive.
# In standalone mode, you might prefer to switch off the client side behavior
# so that it does not keep trying and failing to reach its peers. The following example
# shows how to switch off the client-side behavior:

spring.application.name: EurekaServer

server:
  port: 8761

eureka:
  instance:
    hostname: localhost
  client:
    registerWithEureka: false
    fetchRegistry: false
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/